#!/bin/bash
#PBS -l nodes=1:ppn=1,mem=16gb,walltime=8:00:00
set -e
set -u
set -o pipefail

# Check for PBS/Samplesheet version agreement
PIPELINE_VERSION="0"
SAMPLESHEET_VERSION=$(tail -n 1 "${SampleSheet}" | sed -E 's/#//g')
if [ "${SAMPLESHEET_VERSION}" -ne "${PIPELINE_VERSION}" ]
then
    echo "${SampleSheet} is incompatible with this version of gopher-pipelines."
    echo "${SampleSheet} was generated with version ${SAMPLESHEET_VERSION}, and this script requires ${PIPELINE_VERSION}."
    exit 100
fi

# Read the first line of the samplesheet to get the working directory and the
# GTF. This is not super elegant, but it works with the samplesheet format
IN=$(head -n 1 "${SampleSheet}")
# handle empty line and comment line. We return a 0 exit status because we do not
# want a comment/blank line in the samplesheet to hold up the array jobs
[ -z "${IN// }" ] && echo "hit an empty line in sample sheet" && exit 0
[ "$IN" = "#.*" ] && echo "hit a comment line in sample sheet" && exit 0
while IFS="|" read -ra OPTS; do 
    SAMPLENM=${OPTS[0]}
    R1FILE=${OPTS[1]}
    R2FILE=${OPTS[2]}
    OUTDIR=${OPTS[3]}
    WORKDIR=${OPTS[4]}
    TRIM=${OPTS[5]}
    TRIMOPTS=${OPTS[6]}
    HISAT2INDEX=${OPTS[7]}
    HISAT2OPTS=${OPTS[8]}
    UNSTRANDEDLIB=${OPTS[9]}
    GTFFILE=${OPTS[10]}
done <<< "$IN"

# load necessary modules
module load R/3.5.0
module load python/3.6.3

# Print the loaded modules to stderr and a log file
module list -t
LOG_FNAME="${OUTDIR}/BulkRNASeq_Summary_Log.txt"
echo "$(date '+%F %T'): Summary started" > "${LOG_FNAME}"
module list -t 2>> "${LOG_FNAME}"

# Set the R_LIBS_USER variable here. This is where packages will be loaded from
# within R
export R_LIBS_USER=""
echo "export R_LIBS_USER="'""' >> "${LOG_FNAME}"

echo "mkdir -p "'"'"${WORKDIR}/allsamples"'"'" && cd "'"'"${WORKDIR}/allsamples"'"' >> "${LOG_FNAME}"
mkdir -p "${WORKDIR}/allsamples" && cd "${WORKDIR}/allsamples"

# Merge the single-sample counts into a large matrix
echo "$(date '+%F %T'): Merging read counts from all samples." >> "${LOG_FNAME}"
echo "python3 "'"'"${MERGECOUNTS}"'"'" "'"'"${WORKDIR}/singlesamples"'"'" > merged_counts.txt" >> "${LOG_FNAME}"
python3 "${MERGECOUNTS}" "${WORKDIR}/singlesamples" > merged_counts.txt

# Copy the merged counts into the output directory. The -u option to cp causes
# the copy to happen only if the source file is newer than the destination file
# or if the destination does not exist.
echo "$(date '+%F %T'): Copying merged counts matrix into ${OUTDIR}" >> "${LOG_FNAME}"
echo "cp -u merged_counts.txt "'"'"${OUTDIR}/merged_counts.txt"'"' >> "${LOG_FNAME}"
cp -u merged_counts.txt "${OUTDIR}/merged_counts.txt"

# echo "$(date '+%F %T'): Done summarizing bulk RNAseq run" >> "${LOG_FNAME}"
