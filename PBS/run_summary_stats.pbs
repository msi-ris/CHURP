#!/bin/bash
#PBS -l nodes=1:ppn=8,mem=16gb,walltime=8:00:00
set -e
set -u
set -o pipefail

# Check for PBS/Samplesheet version agreement
PIPELINE_VERSION="0"
SAMPLESHEET_VERSION=$(tail -n 1 "${SampleSheet}" | sed -E 's/#//g')
if [ "${SAMPLESHEET_VERSION}" -ne "${PIPELINE_VERSION}" ]
then
    echo "${SampleSheet} is incompatible with this version of gopher-pipelines."
    echo "${SampleSheet} was generated with version ${SAMPLESHEET_VERSION}, and this script requires ${PIPELINE_VERSION}."
    exit 100
fi

# Read the first line of the samplesheet to get the working directory and the
# GTF. This is not super elegant, but it works with the samplesheet format
IN=$(head -n 1 "${SampleSheet}")
# handle empty line and comment line. We return a 0 exit status because we do not
# want a comment/blank line in the samplesheet to hold up the array jobs
[ -z "${IN// }" ] && echo "hit an empty line in sample sheet" && exit 0
[ "$IN" = "#.*" ] && echo "hit a comment line in sample sheet" && exit 0
while IFS="|" read -ra OPTS; do 
    SAMPLENM=${OPTS[0]}
    EXPR_GROUP=${OPTS[1]}
    R1FILE=${OPTS[2]}
    R2FILE=${OPTS[3]}
    OUTDIR=${OPTS[4]}
    WORKDIR=${OPTS[5]}
    TRIM=${OPTS[6]}
    RMDUP=${OPTS[7]}
    TRIMOPTS=${OPTS[8]}
    HISAT2INDEX=${OPTS[9]}
    HISAT2OPTS=${OPTS[10]}
    UNSTRANDED=${OPTS[11]}
    GTFFILE=${OPTS[12]}
done <<< "$IN"

# load necessary modules
module load R/3.5.0
module load python/3.6.3

# Make directories for the output files. We want to keep the outdir organized
LOGDIR="${OUTDIR}/Logs"
COUNTSDIR="${OUTDIR}/Counts"
PLOTSDIR="${OUTDIR}/Plots"
DEGDIR="${OUTDIR}/DEGs"

mkdir -p "${LOGDIR}" "${COUNTSDIR}" "${PLOTSDIR}" "${DEGDIR}"

# Print the loaded modules to stderr and a log file
module list -t
LOG_FNAME="${LOGDIR}/BulkRNASeq_Summary_Log.txt"
echo "# $(date '+%F %T'): Summary started" > "${LOG_FNAME}"
module list -t 2>> "${LOG_FNAME}"

if [ -z "${R2FILE}" ]
then
    PE="false"
    echo "# No R2 file detected; running ${SAMPLENM} as single-end" >> "${LOG_FNAME}"
    echo "# NOTE! We are assuming that all samples were subject to the same preparation and sequencing protocols." >> "${LOG_FNAME}"
    echo "# NOTE! We do not support mixing of single-end and paired-end samples for counts and differential expression testing." >> "${LOG_FNAME}"
else
    PE="true"
    echo "# R2 file detected; running ${SAMPLENM} as paired-end" >> "${LOG_FNAME}"
    echo "# NOTE! We are assuming that all samples were subject to the same preparation and sequencing protocols." >> "${LOG_FNAME}"
    echo "# NOTE! We do not support mixing of single-end and paired-end samples for counts and differential expression testing." >> "${LOG_FNAME}"
fi

# Set the R_LIBS_USER variable here. This is where packages will be loaded from
# within R
echo "export R_LIBS_USER="'"'"/home/msistaff/public/gopher-pipelines/v${PIPELINE_VERSION}/R"'"' >> "${LOG_FNAME}"
export R_LIBS_USER="/home/msistaff/public/gopher-pipelines/v${PIPELINE_VERSION}/R"

# Set the path to the featureCounts executable.
echo "# $(date '+%F %T'): Using featureCounts v. 1.6.2" >> "${LOG_FNAME}"
echo "FEATURECOUNTS="'"'"/home/msistaff/public/gopher-pipelines/v${PIPELINE_VERSION}/Supp/subread-1.6.2-Linux-x86_64/bin/featureCounts"'"' >> "${LOG_FNAME}"
FEATURECOUNTS="/home/msistaff/public/gopher-pipelines/v${PIPELINE_VERSION}/Supp/subread-1.6.2-Linux-x86_64/bin/featureCounts"

echo "mkdir -p "'"'"${WORKDIR}/allsamples"'"'" && cd "'"'"${WORKDIR}/allsamples"'"' >> "${LOG_FNAME}"
mkdir -p "${WORKDIR}/allsamples" && cd "${WORKDIR}/allsamples"

# Use featureCounts to make a merged counts matrix
echo "# $(date '+%F %T'): Making a counts matrix for all samples." >> "${LOG_FNAME}"
echo "BAM_LIST=(\$(find . -type l -exec basename {} \\; | sort -V))" >> "${LOG_FNAME}"
BAM_LIST=($(find . -type l -exec basename {} \\;| sort -V))
if [ "${UNSTRANDED}" = "yes" ]
then
    if [ "${PE}" = "true" ]
    then
        echo "# $(date '+%F %T'): Library is unstranded and paired-end" >> "${LOG_FNAME}"
        echo '"'"${FEATURECOUNTS}"'"'" -a "'"'"${GTFFILE}"'"'" -T ${PBS_NUM_PPN} -B -p -Q 10 -s 0 -o subread_counts.txt "'"'"${BAM_LIST[@]}"'"' >> "${LOG_FNAME}"
        "${FEATURECOUNTS}" -a "${GTFFILE}" -T ${PBS_NUM_PPN} -B -p -Q 10 -s 0 -o subread_counts.txt "${BAM_LIST[@]}"
    else
        echo "# $(date '+%F %T'): Library is unstranded and single-end" >> "${LOG_FNAME}"
        echo '"'"${FEATURECOUNTS}"'"'" -a "'"'"${GTFFILE}"'"'" -T ${PBS_NUM_PPN} -Q 10 -s 0 -o subread_counts.txt "'"'"${BAM_LIST[@]}"'"' >> "${LOG_FNAME}"
        "${FEATURECOUNTS}" -a "${GTFFILE}" -T ${PBS_NUM_PPN} -B -Q 10 -s 0 -o subread_counts.txt "${BAM_LIST[@]}"
    fi
else
    if [ "${PE}" = "true" ]
    then
        echo "# $(date '+%F %T'): Library is stranded and paired-end." >> "${LOG_FNAME}"
        echo '"'"${FEATURECOUNTS}"'"'" -a "'"'"${GTFFILE}"'"'" -T ${PBS_NUM_PPN} -B -p -Q 10 -s 2 -o subread_counts.txt "'"'"${BAM_LIST[@]}"'"' >> "${LOG_FNAME}"
        "${FEATURECOUNTS}" -a "${GTFFILE}" -T ${PBS_NUM_PPN} -B -p -Q 10 -s 2 -o subread_counts.txt "${BAM_LIST[@]}"
    else
        echo "# $(date '+%F %T'): Library is stranded and single-end" >> "${LOG_FNAME}"
        echo '"'"${FEATURECOUNTS}"'"'" -a "'"'"${GTFFILE}"'"'" -T ${PBS_NUM_PPN} -Q 10 -s 2 -o subread_counts.txt "'"'"${BAM_LIST[@]}"'"' >> "${LOG_FNAME}"
        "${FEATURECOUNTS}" -a "${GTFFILE}" -T ${PBS_NUM_PPN} -Q 10 -s 2 -o subread_counts.txt "${BAM_LIST[@]}"
    fi
fi

# Summarize the merged count data, including descriptive summaries and differential expression tests if >1 group present.
echo "# $(date '+%F %T'): Running edgeR analysis on counts" >> "${LOG_FNAME}"
echo "Rscript "'"'"${RSUMMARY}"'"'" "'"'"${OUTDIR}"'"'" "'"'"${WORKDIR}"'"'" "'"'"${SampleSheet}"'"'" "'"'"${WORKDIR}/subread_counts.txt"'"' '"'"${MINLEN}"'"' " &> Rout.txt" >> "${LOG_FNAME}"
Rscript "${RSUMMARY}" "${OUTDIR}" "${WORKDIR}" "${SampleSheet}" "${WORKDIR}/allsamples/subread_counts.txt" "${MINLEN}" &> Rout.txt

echo "# ----- Output from ${RSUMMARY} below" >> "${LOG_FNAME}"
cat Rout.txt >> "${LOG_FNAME}"
echo "# ----- End output from ${RSUMMARY}" >> "${LOG_FNAME}"

# Copy the merged counts into the output directory. The -u option to cp causes
# the copy to happen only if the source file is newer than the destination file
# or if the destination does not exist.
echo "# $(date '+%F %T'): Copying merged counts matrix and summary into ${COUNTSDIR}" >> "${LOG_FNAME}"
echo "cp -u subread_counts.txt "'"'"${COUNTSDIR}/subread_counts.txt"'"' >> "${LOG_FNAME}"
echo "cp -u subread_counts.txt.summary "'"'"${COUNTSDIR}/subread_counts.txt.summary"'"' >> "${LOG_FNAME}"
cp -u subread_counts.txt "${COUNTSDIR}/subread_counts.txt"
cp -u subread_counts.txt.summary "${COUNTSDIR}/subread_counts.txt.summary"

# We also want to keep the sorted BAM files and the GTF used for counts, in
# case the user wants to go back to it
echo "# $(date '+%F %T'): Copying GTF into ${OUTDIR}." >> "${LOG_FNAME}"
echo "cp -u "'"'"${GTFFILE}"'"'" "'"'"${OUTDIR}"'"' >> "${LOG_FNAME}"
cp -u "${GTFFILE}" "${OUTDIR}"

# AWK command from S. Munro to make a translation table fo Ensembl IDs and
# gene names
echo "# $(date '+%F %T'): Generating translation table of gene name and Ensembl ID." >> "${LOG_FNAME}"
awk -F '\\t' '$3 == "gene" { print $9 }' <(gzip -cd "${GTFFILE}" || cat "${GTFFILE}") | tr -d ';"' | awk -F ' ' -v OFS='\\t' '{print $2,$6}' > "${OUTDIR}/gene_id_gene_name_map.txt"

# Link the work directories to the output directory
echo "ln -sf "'"'"${WORKDIR}/singlesamples"'"'" "'"'"${OUTDIR}/singlesamples_work_directory"'"' >> "${LOG_FNAME}"
echo "ln -sf "'"'"${WORKDIR}/allsamples"'"'" "'"'"${OUTDIR}/allsamples_work_directory"'"' >> "${LOG_FNAME}"
ln -sf "${WORKDIR}/singlesamples" "${OUTDIR}/singlesamples_work_directory"
ln -sf "${WORKDIR}/allsamples" "${OUTDIR}/allsamples_work_directory"

# We will generate an HTML report
# Rscript -e "library(rmarkdown); rmarkdown::render('Test_Rmd_Rscript.Rmd')"

echo "# $(date '+%F %T'): Done summarizing bulk RNAseq run" >> "${LOG_FNAME}"
